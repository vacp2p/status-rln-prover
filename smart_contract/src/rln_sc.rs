// third-party
use alloy::primitives::U256;
use alloy::providers::Provider;
use alloy::{
    primitives::Address,
    sol,
    transports::{RpcError, TransportErrorKind},
};
use async_trait::async_trait;
// internal
// use crate::common::AlloyWsProvider;

#[derive(thiserror::Error, Debug)]
pub enum RlnScError {
    #[error("RPC transport error: {0}")]
    RpcTransportError(#[from] RpcError<TransportErrorKind>),
    #[error(transparent)]
    Alloy(#[from] alloy::contract::Error),
    #[error("Pending transaction error: {0}")]
    PendingTransactionError(#[from] alloy::providers::PendingTransactionError),
    #[error("Private key cannot be empty")]
    EmptyPrivateKey,
    #[error("Unable to connect with signer: {0}")]
    SignerConnectionError(String),
}

#[async_trait]
pub trait RLNRegister {
    type Error;

    async fn register_user(
        &self,
        address: &Address,
        identity_commitment: U256,
    ) -> Result<(), Self::Error>;
}

sol! {

    // src: staking-reward-streamer/src/rln/RLN.sol
    // Compile bytecode (in staking-reward-streamer folder):
    // docker run -v ./:/sources ethereum/solc:0.8.26 --bin --via-ir --optimize --optimize-runs 1 --overwrite @openzeppelin/contracts=/sources/lib/openzeppelin-contracts/contracts @openzeppelin/contracts-upgradeable=/sources/lib/openzeppelin-contracts-upgradeable/contracts /sources/src/rln/RLN.sol

    #[sol(rpc, bytecode="60a0806040523460d657306080525f549060ff8260081c166084575060ff80821610604b575b6040516117b090816100db82396080518181816107040152818161084a0152610c700152f35b60ff90811916175f557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a15f6025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c90816301ffc9a71461104857508063248a9ca3146110225780632f2ff15d14610f8957806336568abe14610ef75780633659cfe614610c5257806345bc4d1014610ae55780634f1ef286146107d65780635095af64146107af57806352d1902d146106f2578063530b97a4146104085780635daf08ca146103ce57806374a8569b146103a657806374f533171461037f57806391d14854146103365780639cf502fe14610319578063a217fddf146102ff578063d0383d68146102e2578063d547741f146102aa5763dbbdf083146100ed575f80fd5b346102a65760403660031901126102a65760043561010961109b565b335f9081525f805160206116db833981519152602052604090205490919060ff16156101f25760fc549060fb548210156101e3575f81815260fd60205260409020546001600160a01b03166101d45760407f5a92c2530f207992057b9c3e544108ffce3beda4a63719f316967c49bf6159d29160019482519061018b826110c7565b868060a01b031681528560208201868152835f5260fd602052845f2092828060a01b03905116828060a01b0319845416178355519101558151908152836020820152a10160fc55005b63c9ac99a160e01b5f5260045ffd5b63542b6c8360e01b5f5260045ffd5b6102a2602061028a6011610205336113e6565b60378461021e5f8051602061163b8339815191526114e0565b60405196879476020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b828701528051918291018587015e8401907001034b99036b4b9b9b4b733903937b6329607d1b84830152805192839101604883015e01015f838201520301601f1981018352826110f6565b60405162461bcd60e51b815291829160048301611307565b0390fd5b5f80fd5b346102a65760403660031901126102a6576102e06004356102c961109b565b906102db6102d682611134565b6111e2565b611226565b005b346102a6575f3660031901126102a657602060fb54604051908152f35b346102a6575f3660031901126102a65760206040515f8152f35b346102a6575f3660031901126102a657602060fc54604051908152f35b346102a65760403660031901126102a65761034f61109b565b6004355f5260c960205260405f209060018060a01b03165f52602052602060ff60405f2054166040519015158152f35b346102a6575f3660031901126102a65760206040515f8051602061163b8339815191528152f35b346102a6575f3660031901126102a65760fe546040516001600160a01b039091168152602090f35b346102a65760203660031901126102a6576004355f5260fd6020526040805f206001808060a01b0382541691015482519182526020820152f35b346102a65760a03660031901126102a6576104216110b1565b61042961109b565b6044356001600160a01b038116908190036102a6576084356001600160a01b03811692908390036102a6575f549360ff8560081c1615948580966106e5575b80156106ce575b156106725760ff1981166001175f5585610661575b5061049e60ff5f5460081c16610499816112a7565b6112a7565b6001600160a01b0381165f9081525f805160206116fb833981519152602052604090205460ff161561061a575b506001600160a01b0381165f9081525f8051602061165b833981519152602052604090205460ff16156105c4575b505f8181525f805160206116db833981519152602052604090205460ff1615610577575b5060016064351b60fb5560fe80546001600160a01b03191691909117905561054157005b61ff00195f54165f557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b5f8181525f805160206116db83398151915260205260408120805460ff191660011790553391905f8051602061163b833981519152905f805160206115bb8339815191529080a48261051d565b6001600160a01b03165f8181525f8051602061165b83398151915260205260408120805460ff191660011790553391905f8051602061169b833981519152905f805160206115bb8339815191529080a4836104f9565b6001600160a01b03165f8181525f805160206116fb83398151915260205260408120805460ff191660011790553391905f805160206115bb8339815191528180a4846104cb565b61ffff1916610101175f5585610484565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561046f5750600160ff82161461046f565b50600160ff821610610468565b346102a6575f3660031901126102a6577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036107495760206040515f8051602061167b8339815191528152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608490fd5b346102a6575f3660031901126102a65760206040515f8051602061169b8339815191528152f35b60403660031901126102a6576107ea6110b1565b6024356001600160401b0381116102a657366023820112156102a657806004013561081481611119565b9061082260405192836110f6565b808252602082019236602483830101116102a657815f9260246020930186378301015261089c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661087e30821415611146565b5f8051602061167b833981519152546001600160a01b031614611194565b335f9081525f805160206116fb833981519152602052604090205460ff1615610ad6575f805160206115fb8339815191525460ff16156108e15750506102e090611331565b6040516352d1902d60e01b81526001600160a01b03841690602081600481855afa5f9181610aa2575b506109585760405162461bcd60e51b815260206004820152602e60248201525f8051602061175b83398151915260448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b5f8051602061167b83398151915203610a5e5761097484611331565b604051905f805160206116bb8339815191525f80a2815115801590610a56575b61099a57005b833b15610a1857506102e0925f92839251915af43d15610a11573d6109be81611119565b906109cc60405192836110f6565b81523d5f602083013e5b604051916109e56060846110f6565b602783525f8051602061173b8339815191526020840152660819985a5b195960ca1b6040840152611582565b60606109d6565b62461bcd60e51b815260206004820152602660248201525f805160206115db8339815191526044820152651b9d1c9858dd60d21b6064820152608490fd5b506001610994565b60405162461bcd60e51b815260206004820152602960248201525f8051602061171b8339815191526044820152681a58589b195555525160ba1b6064820152608490fd5b9091506020813d602011610ace575b81610abe602093836110f6565b810103126102a65751908661090a565b3d9150610ab1565b6335a1657b60e11b5f5260045ffd5b346102a65760203660031901126102a657335f9081525f8051602061165b83398151915260205260409020546004359060ff1615610c2657805f5260fd60205260405f20604051610b35816110c7565b81546001600160a01b0316808252600190920154602082019081529115610c175760fe54905160405163c96be4cb60e01b81526001600160a01b03918216600482015291602091839160249183915f91165af18015610c0c57610bd9575b7f707cd9719d0c14265b9e456f7add99095401f907e570e5cdd65a92920947c450604083855f5260fd6020525f60018382208281550155518151908152336020820152a1005b906020823d602011610c04575b81610bf3602093836110f6565b810103126102a65790506040610b93565b3d9150610be6565b6040513d5f823e3d90fd5b637b6d05f560e01b5f5260045ffd5b6102a2602061028a6011610c39336113e6565b60378461021e5f8051602061169b8339815191526114e0565b346102a65760203660031901126102a657610c6b6110b1565b610ca47f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661087e30821415611146565b335f9081525f805160206116fb833981519152602052604090205460ff1615610ad657602090604051610cd783826110f6565b5f815282810190601f1984013683375f805160206115fb8339815191525460ff1615610d095750506102e09150611331565b6040516352d1902d60e01b81526001600160a01b038416908581600481855afa5f9181610ec8575b50610d7f5760405162461bcd60e51b815260048101879052602e60248201525f8051602061175b83398151915260448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b5f8051602061167b83398151915203610e8457610d9b84611331565b604051905f805160206116bb8339815191525f80a2815115801590610e7d575b610dc157005b833b15610e3f57506102e093925f92839251915af43d15610e37573d90610de782611119565b91610df560405193846110f6565b82523d5f8484013e5b5f8051602061173b83398151915260405193610e1b6060866110f6565b60278552840152660819985a5b195960ca1b6040840152611582565b606090610dfe565b62461bcd60e51b815260048101859052602660248201525f805160206115db8339815191526044820152651b9d1c9858dd60d21b6064820152608490fd5b505f610dbb565b60405162461bcd60e51b815260048101869052602960248201525f8051602061171b8339815191526044820152681a58589b195555525160ba1b6064820152608490fd5b9091508681813d8311610ef0575b610ee081836110f6565b810103126102a657519087610d31565b503d610ed6565b346102a65760403660031901126102a657610f1061109b565b336001600160a01b03821603610f2c576102e090600435611226565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b346102a65760403660031901126102a657600435610fa561109b565b90610fb26102d682611134565b805f5260c960205260405f2060018060a01b0383165f5260205260ff60405f20541615610fdb57005b5f81815260c9602090815260408083206001600160a01b0395909516808452949091528120805460ff19166001179055339291905f805160206115bb8339815191529080a4005b346102a65760203660031901126102a6576020611040600435611134565b604051908152f35b346102a65760203660031901126102a6576004359063ffffffff60e01b82168092036102a657602091637965db0b60e01b811490811561108a575b5015158152f35b6301ffc9a760e01b14905083611083565b602435906001600160a01b03821682036102a657565b600435906001600160a01b03821682036102a657565b604081019081106001600160401b038211176110e257604052565b634e487b7160e01b5f52604160045260245ffd5b601f909101601f19168101906001600160401b038211908210176110e257604052565b6001600160401b0381116110e257601f01601f191660200190565b5f5260c9602052600160405f20015490565b1561114d57565b60405162461bcd60e51b815260206004820152602c60248201525f8051602061161b83398151915260448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561119b57565b60405162461bcd60e51b815260206004820152602c60248201525f8051602061161b83398151915260448201526b6163746976652070726f787960a01b6064820152608490fd5b5f81815260c96020908152604080832033845290915290205460ff16156112065750565b602061028a60116102a29360378461021e611220336113e6565b936114e0565b805f5260c960205260405f2060018060a01b0383165f5260205260ff60405f205416611250575050565b5f81815260c9602090815260408083206001600160a01b0395909516808452949091528120805460ff19169055339291907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9080a4565b156112ae57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b803b15611366575f8051602061167b83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b9081518110156113d2570160200190565b634e487b7160e01b5f52603260045260245ffd5b6113f0602a611119565b906113fe60405192836110f6565b602a825261140c602a611119565b6020830190601f19013682378251156113d257603090538151600110156113d2576078602183015360295b6001811161148b57506114475790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b90600f811660108110156113d2576f181899199a1a9b1b9c1cb0b131b232b360811b901a6114b983856113c1565b5360041c9080156114cc575f1901611437565b634e487b7160e01b5f52601160045260245ffd5b6114ea6042611119565b906114f860405192836110f6565b604282526115066042611119565b6020830190601f19013682378251156113d257603090538151600110156113d2576078602183015360415b6001811161154157506114475790565b90600f811660108110156113d2576f181899199a1a9b1b9c1cb0b131b232b360811b901a61156f83856113c1565b5360041c9080156114cc575f1901611531565b9091901561158e575090565b81511561159e5750805190602001fd5b60405162461bcd60e51b81529081906102a2906004830161130756fe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914346756e6374696f6e206d7573742062652063616c6c6564207468726f75676820d1f21ec03a6eb050fba156f5316dad461735df521fb446dd42c5a4728e9c70fe897855dc996bc4db78f148038107b75f1f55bc585ff7cb118de0535894d61eed360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc12b42e8a160f6064dc959c6f251e3af0750ad213dbecf573b4710d67d6c28e39bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b2c45c034475732bf079b2b599013f165badefbf9cb6b1b2cd9e47295795a726f81fe90a866a48a634a12852c1be675b683a22307409932a7443b8029347be75645524331393637557067726164653a20756e737570706f727465642070726f78416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c45524331393637557067726164653a206e657720696d706c656d656e74617469a2646970667358221220aabe61fff478beb4c0bdff38e04d638b5a6fa6c0e7c452ab539de7acb4afc78f64736f6c634300081a0033")]
    contract KarmaRLNSC {
        event MemberRegistered(uint256 identityCommitment, uint256 index);
        event MemberSlashed(uint256 index, address slasher);

        struct User {
            address userAddress;
            uint256 index;
        }

        function members(uint256 commitment) public view returns (User memory);
        function SET_SIZE() public view returns (uint256);
        function identityCommitmentIndex() public view returns (uint256);
        function karma() public view returns (address);
        function SLASHER_ROLE() public view returns (bytes32);
        function REGISTER_ROLE() public view returns (bytes32);
        function hasRole(bytes32 role, address account) public view returns (bool);
        function getRoleAdmin(bytes32 role) public view returns (bytes32);
        function register(uint256 identityCommitment, address user) external onlyRole(REGISTER_ROLE);
        function initialize(address _owner, address _slasher, address _register, uint256 depth, address _token);
    }
}

/*
impl KarmaRLNSC::KarmaRLNSCInstance<AlloyWsProvider> {
    pub async fn try_new_with_signer(
        rpc_url: Url,
        address: Address,
        private_key: Zeroizing<String>,
    ) -> Result<KarmaRLNSC::KarmaRLNSCInstance<impl alloy::providers::Provider>, RlnScError> {
        if private_key.is_empty() {
            return Err(RlnScError::EmptyPrivateKey);
        }

        let ws_connect = WsConnect::new(rpc_url.as_str());
        let signer = PrivateKeySigner::from_str(&private_key)
            .map_err(|e| RlnScError::SignerConnectionError(e.to_string()))?;

        let provider = ProviderBuilder::new()
            .network::<Ethereum>()
            .wallet(signer)
            .connect_ws(ws_connect)
            .await
            .map_err(RlnScError::RpcTransportError)?;

        Ok(KarmaRLNSC::new(address, provider))
    }
}
*/

#[async_trait]
impl<T: Provider> RLNRegister for KarmaRLNSC::KarmaRLNSCInstance<T> {
    type Error = alloy::contract::Error;

    async fn register_user(
        &self,
        address: &Address,
        identity_commitment: U256,
    ) -> Result<(), Self::Error> {
        self.register(identity_commitment, *address)
            .send()
            .await?
            .watch()
            .await?;
        Ok(())
    }
}

#[cfg(feature = "anvil")]
#[cfg(test)]
mod tests {
    use super::*;
    // third-party
    use crate::KarmaSC;
    use alloy::primitives::address;
    use alloy::sol_types::SolCall;

    #[tokio::test]
    async fn test_register() {
        let provider = ProviderBuilder::new().connect_anvil_with_wallet();

        // Deploy Karma SC

        // let contract_distributor_1 = crate::karma_sc::tests::KarmaDistributorMock::deploy(&provider).await.unwrap();
        // let contract_distributor_2 = crate::karma_sc::tests::KarmaDistributorMock::deploy(&provider).await.unwrap();

        let addr_alice = address!("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266");
        let addr_bob = address!("0x70997970C51812dc3A010C7d01b50e0d17dc79C8");
        let addr_mickey = address!("0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC");

        // Deploy the KarmaTiers contract.
        let contract_0 = KarmaSC::deploy(&provider).await.unwrap();
        let init_data = KarmaSC::initializeCall { _owner: addr_alice }.abi_encode();
        let contract_proxy = crate::karma_sc::tests::ERC1967Proxy::deploy(
            &provider,
            *contract_0.address(),
            init_data.into(),
        )
        .await
        .unwrap();
        println!("contract_proxy: {:?}", contract_proxy.address());
        let contract = KarmaSC::new(*contract_proxy.address(), &provider);
        println!("contract KarmaSC: {:?}", contract_proxy.address());

        // Deploy RLN SC

        let contract_rln_0 = KarmaRLNSC::deploy(&provider).await.unwrap();
        let init_data_1 = KarmaRLNSC::initializeCall {
            _owner: addr_alice,
            _slasher: addr_alice,
            _register: addr_alice,
            depth: U256::from(2),
            _token: *contract.address(),
        }
        .abi_encode();
        let contract_proxy_rln = crate::karma_sc::tests::ERC1967Proxy::deploy(
            &provider,
            *contract_rln_0.address(),
            init_data_1.into(),
        )
        .await
        .unwrap();
        println!("contract_proxy_rln: {:?}", contract_proxy_rln.address());
        let contract_rln = KarmaRLNSC::new(*contract_proxy_rln.address(), &provider);

        let id_commitment = U256::from(1);
        let call_1 = contract_rln.register(id_commitment, addr_bob);
        let tx_hash_1 = call_1.send().await.unwrap().watch().await.unwrap();
        println!("tx_hash_1: {:?}", tx_hash_1);

        let id_commitment_2 = U256::from(2);
        // let call_2 = contract_rln.register(id_commitment_2, addr_mickey);
        // let tx_hash_2 = call_2.send().await.unwrap().watch().await.unwrap();
        // println!("tx_hash_2: {:?}", tx_hash_2);

        contract_rln
            .register_user(&addr_mickey, id_commitment_2)
            .await
            .unwrap();

        let result = contract_rln.members(id_commitment).call().await.unwrap();
        assert_eq!(result.userAddress, addr_bob);
        assert_eq!(result.index, U256::from(0));
        let result = contract_rln.members(id_commitment_2).call().await.unwrap();
        assert_eq!(result.userAddress, addr_mickey);
        assert_eq!(result.index, U256::from(1));
    }
}
