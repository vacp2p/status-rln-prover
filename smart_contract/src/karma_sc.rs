// third-party
use alloy::providers::Provider;
use alloy::{
    primitives::{Address, U256},
    providers::{ProviderBuilder, WsConnect},
    sol,
    transports::{RpcError, TransportError},
};
use async_trait::async_trait;
use url::Url;
// internal
use crate::AlloyWsProvider;
use crate::KarmaSC::KarmaSCInstance;

#[async_trait]
pub trait KarmaAmountExt {
    type Error;

    async fn karma_amount(&self, address: &Address) -> Result<U256, Self::Error>;
}

sol! {
    // https://github.com/vacp2p/staking-reward-streamer/blob/main/src/Karma.sol
    //
    // docker run -v ./:/sources ethereum/solc:stable --bin --via-ir --optimize --optimize-runs 1 --overwrite  @openzeppelin/contracts=/sources/lib/openzeppelin-contracts/contracts @openzeppelin/contracts-upgradeable=/sources/lib/openzeppelin-contracts-upgradeable/contracts /sources/src/Karma.sol

    #[sol(rpc, bytecode="60a0806040523460d657306080525f549060ff8260081c166084575060ff80821610604b575b6040516128ae90816100db8239608051818181610dcd01528181610f3401526114f70152f35b60ff90811916175f557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a15f6025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c90816301ffc9a714611ac957508063064dc9d214611a9057806306fdde03146119d9578063095ea7b314610a8b57806318160ddd146119b35780631972bc0d146119915780631c96e9501461191457806323b872dd146118e2578063248a9ca3146118c45780632f2ff15d1461182b578063313ce5671461181057806336568abe1461177e5780633659cfe6146114d9578063393ebbf81461146a578063395093511461144457806340c10f19146113215780634ea63793146111e55780634f1ef28614610ebf5780634fb3fda714610ea05780635095af6414610e7857806352d1902d14610dba5780635c15360914610d9f57806361252fd114610cdf5780636366c24214610ca557806370a0823114610c795780638d41b1b714610c5a57806391d1485414610c1057806395d89b4114610b54578063a217fddf14610b38578063a3f4df7e14610b1c578063a457c2d714610a90578063a9059cbb14610a8b578063bb6d890f14610a0b578063bd58199a146109ec578063c4d66de8146105b9578063c96be4cb14610392578063d547741f14610358578063dd62ed3e14610329578063f5b541a6146102ee578063f76f8d78146102c2578063fc69603c146102a5578063fd9ac78714610277578063fdf1a0e8146102235763fe8644f114610202575f80fd5b34610220578060031936011261022057602061012e54604051908152f35b80fd5b503461022057604036600319011261022057604061023f611b1c565b91610248611b32565b9260018060a01b03168152610132602052209060018060a01b03165f52602052602060405f2054604051908152f35b503461022057602036600319011261022057602061029b610296611b1c565b6120df565b9050604051908152f35b503461022057806003193601126102205760206040516127108152f35b50346102205780600319360112610220576102ea6102de611c00565b60405191829182611b48565b0390f35b503461022057806003193601126102205760206040517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298152f35b503461022057604036600319011261022057602090610346611b1c565b5061034f611b32565b50604051908152f35b50346102205760403660031901126102205761038f600435610378611b32565b9061038a61038582611c5b565b611e26565b611e6a565b80f35b5034610220576020366003190112610220576103ac611b1c565b81805260fb60209081526040808420335f908152925290205460ff161580610589575b61057a576103dc81611d37565b1561056b5781906001600160a01b0316815b61012f548310156104e65761040283612518565b90546040516338cbb55760e11b81526004810185905260039290921b1c6001600160a01b031690602081602481855afa9081156104db5786916104a3575b509060019261047261046d61049b94848a5261013260205260408a20885f5260205260405f205490611d2a565b611fef565b91875261013260205260408720855f5260205260405f20610494838254611d09565b9055611d09565b9201916103ee565b9190506020823d82116104d3575b816104be60209383611b8b565b810103126104cf5790516001610440565b5f80fd5b3d91506104b1565b6040513d88823e3d90fd5b906105288460209383825260338552604061051361046d8285205487865261013389528386205490611d2a565b92858152610133875220610494838254611d09565b906105368261012e54611d09565b61012e557fbd92430413e6ad801dfeeeb5f58e6b0ea3d9365b67b1d7fe8896e4025b83b8f183604051848152a2604051908152f35b630913597360e21b8252600482fd5b630e85f68360e11b8252600482fd5b505f805160206127b9833981519152825260fb60209081526040808420335f908152925290205460ff16156103cf565b5034610220576020366003190112610220576105d3611b1c565b9080549160ff8360081c1615928380946109df575b80156109c8575b1561096c5760ff19811660011783558361095b575b506001600160a01b031691821561094c5761061d611bdd565b92610626611c00565b9361064060ff855460081c1661063b816121f7565b6121f7565b8051906001600160401b03821161093857819061065e603654611c23565b601f81116108dd575b50602090601f831160011461087957869261086e575b50508160011b915f199060031b1c1916176036555b83516001600160401b03811161085a576106ad603754611c23565b601f811161080a575b50602094601f82116001146107a757948495829394959261079c575b50508160011b915f199060031b1c1916176037555b6106fb60ff845460081c1661063b816121f7565b82805260fb60205260408320815f5260205260ff60405f20541615610761575b506113886101345561072a5780f35b61ff001981541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b82805260fb60205260408320815f5260205260405f20600160ff198254161790553390835f805160206126b98339815191528180a45f61071b565b015190505f806106d2565b601f198216956037865280862091865b8881106107f2575083600195969798106107da575b505050811b016037556106e7565b01515f1960f88460031b161c191690555f80806107cc565b919260206001819286850151815501940192016107b7565b603785525f805160206127f9833981519152601f830160051c81019160208410610850575b601f0160051c01905b81811061084557506106b6565b858155600101610838565b909150819061082f565b634e487b7160e01b84526041600452602484fd5b015190505f8061067d565b603687528187209250601f198416875b8181106108c557509084600195949392106108ad575b505050811b01603655610692565b01515f1960f88460031b161c191690555f808061089f565b92936020600181928786015181550195019301610889565b603687529091505f80516020612719833981519152601f840160051c8101916020851061092e575b90601f859493920160051c01905b8181106109205750610667565b878155849350600101610913565b9091508190610905565b634e487b7160e01b85526041600452602485fd5b6324f61cdb60e01b8252600482fd5b61ffff19166101011782555f610604565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156105ef5750600160ff8216146105ef565b50600160ff8216106105e8565b5034610220578060031936011261022057602061013454604051908152f35b503461022057602036600319011261022057610a25611b1c565b610a2d611d5a565b6001600160a01b0316610a3f81612506565b15610a7c57602081610a717f51493821a1424bebf150d9f396be5e9a86af464e975f17d50832d7fb9305f04b936125b8565b50604051908152a180f35b630d1a32eb60e11b8252600482fd5b611b72565b503461022057604036600319011261022057610aaa611b1c565b60243580610ac957610abe92039033611eeb565b602060405160018152f35b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b50346102205780600319360112610220576102ea6102de611bdd565b5034610220578060031936011261022057602090604051908152f35b5034610220578060031936011261022057604051908060375490610b7782611c23565b8085529160018116908115610be95750600114610b9f575b6102ea846102de81860382611b8b565b603781525f805160206127f9833981519152939250905b808210610bcf575090915081016020016102de82610b8f565b919260018160209254838588010152019101909291610bb6565b60ff191660208087019190915292151560051b850190920192506102de9150839050610b8f565b5034610220576040366003190112610220576040610c2c611b32565b91600435815260fb602052209060018060a01b03165f52602052602060ff60405f2054166040519015158152f35b5034610220578060031936011261022057602061012d54604051908152f35b5034610220576020366003190112610220576020610c9d610c98611b1c565b611d37565b604051908152f35b5034610220576020366003190112610220576020906040906001600160a01b03610ccd611b1c565b16815261013183522054604051908152f35b503461022057806003193601126102205760405161012f8054808352908352602082019081907f232da9e50dad2971456a78fb5cd6ff6b75019984d6e918139ce990999420f97990855b818110610d895750505082610d3f910383611b8b565b604051928392602084019060208552518091526040840192915b818110610d67575050500390f35b82516001600160a01b0316845285945060209384019390920191600101610d59565b8254845260209093019260019283019201610d29565b50346102205780600319360112610220576020610c9d612032565b50346102205780600319360112610220577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610e125760206040515f805160206127998339815191528152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608490fd5b503461022057806003193601126102205760206040515f805160206127b98339815191528152f35b5034610220576020366003190112610220576020610c9d600435611fef565b50604036600319011261022057610ed4611b1c565b6024356001600160401b0381116111e157366023820112156111e15780600401359083610f0083611bc2565b91610f0e6040519384611b8b565b838352602083019336602482840101116111e15780602460209301863783010152610f867f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f6830821415611c6d565b5f80516020612799833981519152546001600160a01b031614611cbb565b83805260fb60209081526040808620335f908152925290205460ff16156111d2575f805160206126f98339815191525460ff1615610fc957505061038f90612257565b6040516352d1902d60e01b81526001600160a01b03841690602081600481855afa86918161119a575b506110405760405162461bcd60e51b815260206004820152602e60248201525f8051602061285983398151915260448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b5f80516020612799833981519152036111565761105c84612257565b604051905f805160206127d98339815191528680a281511580159061114e575b611088575b5050505080f35b833b1561111057506110ff928492839251915af43d15611109573d6110ac81611bc2565b906110ba6040519283611b8b565b81523d84602083013e5b604051916110d3606084611b8b565b602783525f805160206128398339815191526020840152660819985a5b195960ca1b6040840152612680565b505f808080611081565b60606110c4565b62461bcd60e51b815260206004820152602660248201525f805160206126d98339815191526044820152651b9d1c9858dd60d21b6064820152608490fd5b50600161107c565b60405162461bcd60e51b815260206004820152602960248201525f805160206128198339815191526044820152681a58589b195555525160ba1b6064820152608490fd5b9091506020813d6020116111ca575b816111b660209383611b8b565b810103126111c65751905f610ff2565b8680fd5b3d91506111a9565b630e85f68360e11b8452600484fd5b8280fd5b50346104cf5760603660031901126104cf576111ff611b1c565b335f9081525f805160206127598339815191526020526040902054602435919060ff1615806112fc575b6112ed576001600160a01b03169061124082612506565b156112de5761125e8161125960355461012d5490611d09565b611d09565b50815f5261013160205260405f20611277828254611d09565b90556112868161012d54611d09565b61012d55813b156104cf575f9160448392604051948593849263523dea4b60e11b84526004840152833560248401525af180156112d3576112c5575080f35b6112d191505f90611b8b565b005b6040513d5f823e3d90fd5b630d1a32eb60e11b5f5260045ffd5b630e85f68360e11b5f5260045ffd5b50335f9081525f80516020612779833981519152602052604090205460ff1615611229565b346104cf5760403660031901126104cf5761133a611b1c565b335f9081525f805160206127598339815191526020526040902054602435919060ff16158061141f575b6112ed576035549061137d8361125961012d5485611d09565b506001600160a01b03169182156113da576020816113bd7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef935f95611d09565b6035558484526033825260408420818154019055604051908152a3005b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b50335f9081525f80516020612779833981519152602052604090205460ff1615611364565b346104cf5760403660031901126104cf57610abe611460611b1c565b6024359033611eeb565b346104cf5760203660031901126104cf57600435611486611d5a565b61271081116114ca5760407f2b60ba8fc3afb74a8e3e46b5f094e0578b708b8066fccfe8d038c7c2dfc15dae916101345490806101345582519182526020820152a1005b6308b26a8360e31b5f5260045ffd5b346104cf5760203660031901126104cf576114f2611b1c565b61152b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f6830821415611c6d565b335f9081525f80516020612759833981519152602052604090205460ff16156112ed5760209060405161155e8382611b8b565b5f815282810190601f1984013683375f805160206126f98339815191525460ff16156115905750506112d19150612257565b6040516352d1902d60e01b81526001600160a01b038416908581600481855afa5f918161174f575b506116065760405162461bcd60e51b815260048101879052602e60248201525f8051602061285983398151915260448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b5f805160206127998339815191520361170b5761162284612257565b604051905f805160206127d98339815191525f80a2815115801590611704575b61164857005b833b156116c657506112d193925f92839251915af43d156116be573d9061166e82611bc2565b9161167c6040519384611b8b565b82523d5f8484013e5b5f80516020612839833981519152604051936116a2606086611b8b565b60278552840152660819985a5b195960ca1b6040840152612680565b606090611685565b62461bcd60e51b815260048101859052602660248201525f805160206126d98339815191526044820152651b9d1c9858dd60d21b6064820152608490fd5b505f611642565b60405162461bcd60e51b815260048101869052602960248201525f805160206128198339815191526044820152681a58589b195555525160ba1b6064820152608490fd5b9091508681813d8311611777575b6117678183611b8b565b810103126104cf575190876115b8565b503d61175d565b346104cf5760403660031901126104cf57611797611b32565b336001600160a01b038216036117b3576112d190600435611e6a565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b346104cf575f3660031901126104cf57602060405160128152f35b346104cf5760403660031901126104cf57600435611847611b32565b9061185461038582611c5b565b805f5260fb60205260405f2060018060a01b0383165f5260205260ff60405f2054161561187d57005b5f81815260fb602090815260408083206001600160a01b0395909516808452949091528120805460ff19166001179055339291905f805160206126b98339815191529080a4005b346104cf5760203660031901126104cf576020610c9d600435611c5b565b346104cf5760603660031901126104cf576118fb611b1c565b50611904611b32565b5063d981438f60e01b5f5260045ffd5b346104cf5760203660031901126104cf5761192d611b1c565b611935611d5a565b6001600160a01b031661194781612506565b611982576020816119787f74f5fc8438e42d45c059bfc6e1ab488468e0110e15bd5607d559bb36622120da93612547565b50604051908152a1005b6307378add60e11b5f5260045ffd5b346104cf575f3660031901126104cf576020604051670de0b6b3a76400008152f35b346104cf575f3660031901126104cf576020610c9d6035546119d3612032565b90611d09565b346104cf575f3660031901126104cf576040515f6036546119f981611c23565b8084529060018116908115611a6c5750600114611a21575b6102ea836102de81850382611b8b565b60365f9081525f80516020612719833981519152939250905b808210611a52575090915081016020016102de611a11565b919260018160209254838588010152019101909291611a3a565b60ff191660208086019190915291151560051b840190910191506102de9050611a11565b346104cf5760203660031901126104cf576001600160a01b03611ab1611b1c565b165f52610133602052602060405f2054604051908152f35b346104cf5760203660031901126104cf576004359063ffffffff60e01b82168092036104cf57602091637965db0b60e01b8114908115611b0b575b5015158152f35b6301ffc9a760e01b14905083611b04565b600435906001600160a01b03821682036104cf57565b602435906001600160a01b03821682036104cf57565b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b346104cf5760403660031901126104cf57611904611b1c565b601f909101601f19168101906001600160401b03821190821017611bae57604052565b634e487b7160e01b5f52604160045260245ffd5b6001600160401b038111611bae57601f01601f191660200190565b60405190611bec604083611b8b565b60058252644b61726d6160d81b6020830152565b60405190611c0f604083611b8b565b60058252644b41524d4160d81b6020830152565b90600182811c92168015611c51575b6020831014611c3d57565b634e487b7160e01b5f52602260045260245ffd5b91607f1691611c32565b5f5260fb602052600160405f20015490565b15611c7457565b60405162461bcd60e51b815260206004820152602c60248201525f8051602061273983398151915260448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15611cc257565b60405162461bcd60e51b815260206004820152602c60248201525f8051602061273983398151915260448201526b6163746976652070726f787960a01b6064820152608490fd5b91908201809211611d1657565b634e487b7160e01b5f52601160045260245ffd5b91908203918211611d1657565b611d40906120df565b81811015611d5457611d5191611d2a565b90565b50505f90565b335f9081525f80516020612759833981519152602052604090205460ff1615611d7f57565b611e226020611e0a6011611d923361237e565b603784611d9e5f612464565b60405196879476020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b828701528051918291018587015e8401907001034b99036b4b9b9b4b733903937b6329607d1b84830152805192839101604883015e01015f838201520301601f198101835282611b8b565b60405162461bcd60e51b815291829160048301611b48565b0390fd5b5f81815260fb6020908152604080832033845290915290205460ff1615611e4a5750565b6020611e0a6011611e2293603784611d9e611e643361237e565b93612464565b805f5260fb60205260405f2060018060a01b0383165f5260205260ff60405f205416611e94575050565b5f81815260fb602090815260408083206001600160a01b0395909516808452949091528120805460ff19169055339291907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9080a4565b6001600160a01b0316908115611f9e576001600160a01b0316918215611f4e5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591835f526034825260405f20855f5282528060405f2055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b611ffc61013454826122e7565b90670de0b6b3a76400008210612010575090565b9050670de0b6b3a76400008110156120255790565b50670de0b6b3a764000090565b5f8061012f545b80821061205657505061012d54808211612051575090565b905090565b90916004602061206585612518565b905460405163b58ba16360e01b81529384929091839160031b1c6001600160a01b03165afa9081156112d3575f916120ad575b506120a590600192611d09565b920190612039565b90506020813d82116120d7575b816120c760209383611b8b565b810103126104cf57516001612098565b3d91506120ba565b905f80925f61012f545b8082106121305750506001600160a01b03165f8181526101336020526040902054909361212c929161211a91611d09565b935f52603360205260405f2054611d09565b9190565b90949261213c86612518565b90546040516338cbb55760e11b81526001600160a01b03868116600483015260039390931b9190911c909116949091602083602481895afa9283156112d3575f936121c0575b50906121936001936121b893611d09565b955f5261013260205260405f20838060a01b0386165f5260205260405f205490611d09565b9501906120e9565b9250906020833d82116121ef575b816121db60209383611b8b565b810103126104cf5791519190612193612182565b3d91506121ce565b156121fe57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b803b1561228c575f8051602061279983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b9091905f905f19848209908481029283808410930392808403931461234c5782612710111561022057507fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e919394612710910990828211900360fc1b910360041c170290565b5050506127109192500490565b90815181101561236a570160200190565b634e487b7160e01b5f52603260045260245ffd5b612388602a611bc2565b906123966040519283611b8b565b602a82526123a4602a611bc2565b6020830190601f190136823782511561236a576030905381516001101561236a576078602183015360295b6001811161242357506123df5790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b90600f8116601081101561236a576f181899199a1a9b1b9c1cb0b131b232b360811b901a6124518385612359565b5360041c908015611d16575f19016123cf565b61246e6042611bc2565b9061247c6040519283611b8b565b6042825261248a6042611bc2565b6020830190601f190136823782511561236a576030905381516001101561236a576078602183015360415b600181116124c557506123df5790565b90600f8116601081101561236a576f181899199a1a9b1b9c1cb0b131b232b360811b901a6124f38385612359565b5360041c908015611d16575f19016124b5565b5f5261013060205260405f2054151590565b61012f5481101561236a5761012f5f5260205f2001905f90565b805482101561236a575f5260205f2001905f90565b805f5261013060205260405f2054155f146125b35761012f54600160401b811015611bae5761259a61258482600185940161012f5561012f612532565b819391549060031b91821b915f19901b19161790565b905561012f54905f5261013060205260405f2055600190565b505f90565b5f81815261013060205260409020548015611d54575f198101818111611d165761012f545f19810191908211611d1657808203612645575b50505061012f548015612631575f190161260c8161012f612532565b8154905f199060031b1b1916905561012f555f526101306020525f6040812055600190565b634e487b7160e01b5f52603160045260245ffd5b6126696126576125849361012f612532565b90549060031b1c92839261012f612532565b90555f5261013060205260405f20555f80806125f0565b9091901561268c575090565b81511561269c5750805190602001fd5b60405162461bcd60e51b8152908190611e229060048301611b4856fe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91434a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b846756e6374696f6e206d7573742062652063616c6c6564207468726f75676820c88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d897537c5d0508d5d763c49e75786bc8129e4989797a94b61e8d0b75859fd0ec84daa360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc12b42e8a160f6064dc959c6f251e3af0750ad213dbecf573b4710d67d6c28e39bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae45524331393637557067726164653a20756e737570706f727465642070726f78416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c45524331393637557067726164653a206e657720696d706c656d656e74617469a26469706673582212204e188463b12f07d44a94882a5f68464af247a634f8194e4273a326c29b696ae064736f6c634300081a0033")]
    contract KarmaSC {

        /// @notice Emitted when the address is invalid
        error Karma__InvalidAddress();
        /// @notice Emitted because transfers are not allowed
        error Karma__TransfersNotAllowed();
        /// @notice Emitted when distributor is already added
        error Karma__DistributorAlreadyAdded();
        /// @notice Emitted when distributor is not found
        error Karma__UnknownDistributor();
        /// @notice Emitted sender does not have the required role
        error Karma__Unauthorized();
        /// @notice Emitted when slash percentage to set is invalid
        error Karma__InvalidSlashPercentage();
        /// @notice Emitted when balance to slash is invalid
        error Karma__CannotSlashZeroBalance();

        // From: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L16
        event Transfer(address indexed from, address indexed to, uint256 value);

        function balanceOf(address account) public view override returns (uint256);

        function initialize(address _owner) public initializer;

        function totalSupply() public view virtual override returns (uint256);
        function name() public view virtual override returns (string memory);

        // function _totalSupply() internal view returns (uint256);
        function mint(address account, uint256 amount) public virtual onlyAdminOrOperator;
        function addRewardDistributor(address distributor) public virtual onlyRole(DEFAULT_ADMIN_ROLE);
        function setReward(address rewardsDistributor,uint256 amount,uint256 duration);

    }
}

impl KarmaSC::KarmaSCInstance<AlloyWsProvider> {
    pub async fn try_new(rpc_url: Url, address: Address) -> Result<Self, RpcError<TransportError>> {
        let ws = WsConnect::new(rpc_url.as_str());
        let provider = ProviderBuilder::new().connect_ws(ws).await?;
        // Ok(KarmaSC::new(address, provider))
        Ok(KarmaSCInstance::from((address, provider)))
    }
}

impl<T: Provider> From<(Address, T)> for KarmaSC::KarmaSCInstance<T> {
    fn from((address, provider): (Address, T)) -> Self {
        KarmaSC::new(address, provider)
    }
}

#[async_trait]
impl<T: Provider> KarmaAmountExt for KarmaSC::KarmaSCInstance<T> {
    type Error = alloy::contract::Error;
    async fn karma_amount(&self, address: &Address) -> Result<U256, Self::Error> {
        self.balanceOf(*address).call().await
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;
    // third-party
    use alloy::primitives::U256;
    use alloy::primitives::address;
    use alloy::sol_types::SolCall;
    use claims::assert_gt;

    sol! {

        // src: staking-reward-streamer/test/mocks/KarmaDistributorMock.sol
        // Compile bytecode (in staking-reward-streamer folder):
        // docker run -v ./:/sources ethereum/solc:0.8.26 --bin --via-ir --optimize --optimize-runs 1 --overwrite  @openzeppelin/contracts=/sources/lib/openzeppelin-contracts/contracts @openzeppelin/contracts-upgradeable=/sources/lib/openzeppelin-contracts-upgradeable/contracts /sources/test/mocks/KarmaDistributorMock.sol

        #[sol(rpc, bytecode="608080604052346015576101c6908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c90816329cdf1d21461016157816333dc41c7146101135750806371976aae146100745780638bb87710146100df578063a47bd496146100cc578063a98cdada146100af578063b58ba163146100af5763c141426314610074575f80fd5b346100ab5760203660031901126100ab576001600160a01b0361009561017a565b165f525f602052602060405f2054604051908152f35b5f80fd5b346100ab575f3660031901126100ab576020600154604051908152f35b346100ab5760403660031901126100ab57005b346100ab5760403660031901126100ab576001600160a01b0361010061017a565b165f525f60205260243560405f20555f80f35b346100ab5760203660031901126100ab5760649061012f61017a565b5062461bcd60e51b815260206004820152600f60248201526e139bdd081a5b5c1b195b595b9d1959608a1b6044820152fd5b346100ab5760203660031901126100ab57600435600155005b600435906001600160a01b03821682036100ab5756fea264697066735822122005ab03ec7e765b2b87f3d54b2b2b46e58a1f445003ba393e1d418380b422808764736f6c634300081a0033")]
        contract KarmaDistributorMock is IRewardDistributor {
            // solhint-disable-next-line
            mapping(address => uint256) public userKarmaShare;

            uint256 public totalKarmaShares;

            function setUserKarmaShare(address user, uint256 karma) external;

            function setTotalKarmaShares(uint256 karma) external;

            function rewardsBalanceOf(address) external pure override returns (uint256);

            // solhint-disable-next-line
            function setReward(uint256, uint256) external pure override;

            function rewardsBalanceOfAccount(address account) external view override returns (uint256);

            function totalRewardsSupply() external view override returns (uint256);
        }
    }

    sol! {

            // src: staking-reward-streamer/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol
            // Compile bytecode (in staking-reward-streamer folder):
            // docker run -v ./:/sources ethereum/solc:0.8.26 --bin --via-ir --optimize --optimize-runs 1 --overwrite @openzeppelin/contracts=/sources/lib/openzeppelin-contracts/contracts @openzeppelin/contracts-upgradeable=/sources/lib/openzeppelin-contracts-upgradeable/contracts /sources/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol

            #[sol(rpc, bytecode="60806040526103be80380380610014816101f2565b9283398101906040818303126101ee5780516001600160a01b038116918282036101ee576020810151906001600160401b0382116101ee57019183601f840112156101ee57825161006c6100678261022b565b6101f2565b938185526020850195602083830101116101ee57815f926020809301885e85010152813b15610193577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916821790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a281511580159061018c575b610108575b60405160c390816102fb8239f35b5f8061017b9461011860606101f2565b94602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020870152660819985a5b195960ca1b60408701525190845af43d15610184573d9161016c6100678461022b565b9283523d5f602085013e610246565b505f80806100fa565b606091610246565b505f6100f5565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b5f80fd5b6040519190601f01601f191682016001600160401b0381118382101761021757604052565b634e487b7160e01b5f52604160045260245ffd5b6001600160401b03811161021757601f01601f191660200190565b919290156102a8575081511561025a575090565b3b156102635790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156102bb5750805190602001fd5b604460209160405192839162461bcd60e51b83528160048401528051918291826024860152018484015e5f828201840152601f01601f19168101030190fdfe60806040523615603d575f80516020606e833981519152545f9081906001600160a01b0316368280378136915af43d5f803e156039573d5ff35b3d5ffd5b5f80516020606e833981519152545f9081906001600160a01b0316368280378136915af43d5f803e156039573d5ff3fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212208909899f17d67fa6e7c49a2041f3e1cb1f0006bd1701c1d5b0ffb69059b4fd6164736f6c634300081a0033")]
            contract ERC1967Proxy is Proxy, ERC1967Upgrade {
                constructor(address _logic, bytes memory _data) payable;
                function _implementation() internal view virtual override returns (address impl);
            }

    }

    /*
    #[tokio::test]
    async fn test_balance_of() {

        let provider = ProviderBuilder::new()
            .connect_anvil_with_wallet()
            ;

        let contract_distributor = KarmaDistributorMock::deploy(&provider).await.unwrap();

        // Deploy the KarmaTiers contract.
        let contract = KarmaSC::deploy(&provider).await.unwrap();
        // getTierCount call
        let addr = address!("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266");
        let call_1 = contract.balanceOf(addr);
        let result_1 = call_1.call().await.unwrap();
        println!("result_1: {:?}", result_1);
        assert_eq!(result_1, U256::from(0));

        // let call_2_0 = contract.initialize(addr);
        // let tx_hash_2_0 = call_2_0.send().await.unwrap().watch().await.unwrap();
        // println!("tx_hash_2_0: {:?}", tx_hash_2_0);

        // let call_2 = contract.mint(addr, U256::from(100));
        // let tx_hash_2 = call_2.send().await.unwrap().watch().await.unwrap();
        // println!("tx_hash_2: {:?}", tx_hash_2);

        let call_2 = contract.totalSupply();
        let result_2 = call_2.call().await.unwrap();
        println!("result_2: {:?}", result_2);
        // assert_eq!(result_2, U256::from(0));

        let call_2_2 = contract.name();
        let result_2_2 = call_2_2.call().await.unwrap();
        println!("result_2_2: {:?}", result_2_2);

        let call_3_0 = contract.mint(addr, U256::from(1));
        let tx_hash_3 = call_3_0.send().await.unwrap().watch().await.unwrap();
        println!("tx_hash_3: {:?}", tx_hash_3);

        let call_3 = contract.balanceOf(addr);
        let result_3 = call_3.call().await.unwrap();
        println!("result_3: {:?}", result_3);
    }
    */

    #[tokio::test]
    async fn test_karma_amount() {
        let provider = ProviderBuilder::new().connect_anvil_with_wallet();

        let contract_distributor_1 = KarmaDistributorMock::deploy(&provider).await.unwrap();
        let contract_distributor_2 = KarmaDistributorMock::deploy(&provider).await.unwrap();

        // Deploy the KarmaTiers contract.
        let contract_0 = KarmaSC::deploy(&provider).await.unwrap();

        let addr_alice = address!("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266");

        let init_data = KarmaSC::initializeCall { _owner: addr_alice }.abi_encode();
        let contract_proxy =
            ERC1967Proxy::deploy(&provider, *contract_0.address(), init_data.into())
                .await
                .unwrap();

        println!("contract_proxy: {:?}", contract_proxy.address());
        let contract = KarmaSC::new(*contract_proxy.address(), &provider);
        println!("contract KarmaSC: {:?}", contract_proxy.address());

        //
        let call_0_1 = contract.addRewardDistributor(*contract_distributor_1.address());
        let _tx_hash_0_1 = call_0_1.send().await.unwrap().watch().await.unwrap();
        let call_0_2 = contract.addRewardDistributor(*contract_distributor_2.address());
        let _tx_hash_0_2 = call_0_2.send().await.unwrap().watch().await.unwrap();

        let call_1_1 = contract.setReward(
            *contract_distributor_1.address(),
            U256::from(1000),
            U256::from(1000),
        );
        let _tx_hash_1_1 = call_1_1.send().await.unwrap().watch().await.unwrap();
        let call_1_2 = contract.setReward(
            *contract_distributor_2.address(),
            U256::from(1000),
            U256::from(1000),
        );
        let _tx_hash_1_2 = call_1_2.send().await.unwrap().watch().await.unwrap();

        let call_2_1 = contract_distributor_1.setTotalKarmaShares(U256::from(1000));
        let _tx_hash_2_1 = call_2_1.send().await.unwrap().watch().await.unwrap();
        let call_2_2 = contract_distributor_2.setTotalKarmaShares(U256::from(1000));
        let _tx_hash_2_2 = call_2_2.send().await.unwrap().watch().await.unwrap();

        let addr_bob = address!("0x70997970C51812dc3A010C7d01b50e0d17dc79C8");
        let call_3_1 = contract_distributor_1.setUserKarmaShare(addr_bob, U256::from(1000e18));
        let _tx_hash_3_1 = call_3_1.send().await.unwrap().watch().await.unwrap();
        let call_3_2 = contract_distributor_2.setUserKarmaShare(addr_bob, U256::from(1000e18));
        let _tx_hash_3_2 = call_3_2.send().await.unwrap().watch().await.unwrap();

        // mint some Karma
        let call_3_0 = contract.mint(addr_alice, U256::from(500_000));
        let tx_hash_3 = call_3_0.send().await.unwrap().watch().await.unwrap();
        println!("tx_hash_3: {:?}", tx_hash_3);

        let call_4 = contract.balanceOf(addr_bob);
        let result_4 = call_4.call().await.unwrap();

        let ksc = KarmaSCInstance::from((*contract.address(), provider.clone()));
        let result_5 = ksc.karma_amount(&addr_bob).await.unwrap();

        assert_gt!(result_4, U256::from(0));
        assert_eq!(result_4, result_5);
    }
}
